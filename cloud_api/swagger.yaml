openapi: 3.0.0
info:
  description:
    This is the API documentation for the Backend API in the context of the PhD - Marc Vila.
    This Swagger file is currently work in progress.
  version: 1.0.0
  title: Backend API
tags:
  - name: actuatable-property
    description: The properties of a FeatureOfInterest on which actions can be taken.
  - name: actuation
    description: The actions to be executed.
  - name: actuator
    description: The elements that execute Actuations that need to be taken of a given property (ActuatableProperty), in order to change the state of an element of the world.
  - name: context-aware-rule
    description: The rules or conditions that define how the system acts.
  - name: feature-of-interest
    description: The elements, properties, or characteristics to be observed and manipulated.
  - name: location
    description: Geographical or labeled position for Things.
  - name: observable-property
    description: The properties of the FeatureOfInterest to be observed.
  - name: observation
    description: Measurement of a value by a Sensor for an ObservableProperty at a given instant of Time.
  - name: platform
    description: Subset of the elements that are being used to observe the world, elements that are monitored and eventually acted upon.
  - name: sensor
    description: Sensors are the elements capable of making raw measurements (Observations) of a given property (ObservableProperty).
  - name: thing-type
    description: Information of a ThingType. This is the type of the Thing, so it affects the Observation format.
  - name: thing
    description: Information of a Thing. This is the metadata of a Thing.
externalDocs:
  description: Source code (GitHub - Private)
  url: 'https://github.com/LaQuay/phd_deployment/tree/master/apis/cloud_api/'
paths:
  '/actuatable-properties':
    get:
      tags:
        - actuatable-property
      summary: Get all instances
      description: ''
      operationId: getActuatableProperties
      responses:
        '200':
          description: 'Array containing instances'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActuatableProperty'
    post:
      tags:
        - actuatable-property
      summary: Create a new instance
      description: ''
      operationId: addActuatableProperty
      responses:
        '200':
          description: Successful operation
        '400':
          description: Instance exist
        '422':
          description: Invalid data content provided
      requestBody:
        $ref: '#/components/requestBodies/ActuatableProperty'
  '/actuatable-properties/{actuatable_property_name}/':
    get:
      tags:
        - actuatable-property
      summary: Get an instance
      description: ''
      operationId: getActuatableProperty
      parameters:
        - in: path
          name: actuatable_property_name
          description: Name of the instance queried
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Succesful operation - Returning instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActuatableProperty'
        '404':
          description: Instance with the provided Name does not exist
    put:
      tags:
        - actuatable-property
      summary: Update an instance
      description: ''
      operationId: putActuatableProperty
      parameters:
        - in: path
          name: actuatable_property_name
          description: Name of the instance to be modified
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '404':
          description: Instance with the provided Name does not exist
        '422':
          description: Invalid data content provided
      requestBody:
        $ref: '#/components/requestBodies/ActuatableProperty'
    delete:
      tags:
        - actuatable-property
      summary: Delete an instance
      description: ''
      operationId: deleteActuatableProperty
      parameters:
        - in: path
          name: actuatable_property_name
          description: Name of the instance to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '404':
          description: Instance with the provided Name does not exist
  '/actuations':
    get:
      tags:
        - actuation
      summary: Get all the instances
      description: ''
      operationId: getActuations
      responses:
        '200':
          description: 'Array containing instances'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Actuation'
    post:
      tags:
        - actuation
      summary: Create a new instance
      description: ''
      operationId: addActuation
      responses:
        '200':
          description: Successful operation
        '400':
          description: Instance with the provided information does already exist
        '422':
          description: Invalid data content provided
      requestBody:
        $ref: '#/components/requestBodies/Actuation'
  '/actuations/{actuation_id}/':
    get:
      tags:
        - actuation
      summary: Get an instance
      description: ''
      operationId: getActuation
      parameters:
        - in: path
          name: actuation_id
          description: ID of the instance queried
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Succesful operation - Returning instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Actuation'
        '404':
          description: Instance with the provided ID does not exist
    put:
      tags:
        - actuation
      summary: Update an instance
      description: ''
      operationId: putActuation
      parameters:
        - in: path
          name: actuation_id
          description: ID of the instance to be modified
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '404':
          description: Instance with the provided ID does already exist
        '422':
          description: Invalid data content provided
      requestBody:
        $ref: '#/components/requestBodies/Actuation'
    patch:
      tags:
        - actuation
      summary: Update an instance
      description: ''
      operationId: patchActuation
      parameters:
        - in: path
          name: actuation_id
          description: ID of the instance to be modified
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '404':
          description: Instance with the provided ID does already exist
        '422':
          description: Invalid data content provided
      requestBody:
        $ref: '#/components/requestBodies/Actuation'
    delete:
      tags:
        - actuation
      summary: Delete an instance
      description: ''
      operationId: deleteActuation
      parameters:
        - in: path
          name: actuation_id
          description: ID of the instance to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '404':
          description: Instance with the provided ID does not exist
  '/actuators':
    get:
      tags:
        - actuator
      summary: Get all the instances
      description: ''
      operationId: getActuators
      responses:
        '200':
          description: 'Array containing instances'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Actuator'
    post:
      tags:
        - actuator
      summary: Create a new instance
      description: ''
      operationId: addActuator
      responses:
        '200':
          description: Successful operation
        '400':
          description: Instance with the provided Name does already exist
        '422':
          description: Invalid data content provided
      requestBody:
        $ref: '#/components/requestBodies/Actuator'
  '/actuators/{actuator_name}/':
    get:
      tags:
        - actuator
      summary: Get an instance
      description: ''
      operationId: getActuator
      parameters:
        - in: path
          name: actuator_name
          description: Name of the instance queried
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Succesful operation - Returning instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Actuator'
        '404':
          description: Instance with the provided Name does not exist
    put:
      tags:
        - actuator
      summary: Update an instance
      description: ''
      operationId: putActuator
      parameters:
        - in: path
          name: actuator_name
          description: Name of the instance to be modified
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '404':
          description: Instance with the provided Name does already exist
        '422':
          description: Invalid data content provided
      requestBody:
        $ref: '#/components/requestBodies/Actuator'
    delete:
      tags:
        - actuator
      summary: Delete an instance
      description: ''
      operationId: deleteActuator
      parameters:
        - in: path
          name: actuator_name
          description: Name of the instance to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '404':
          description: Instance with the provided Name does not exist
  '/context-aware-rules':
    get:
      tags:
        - context-aware-rule
      summary: Get all instances
      description: ''
      operationId: getContextAwareRules
      responses:
        '200':
          description: 'Array containing instances'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContextAwareRule'
    post:
      tags:
        - context-aware-rule
      summary: Create a new instance
      description: ''
      operationId: addContextAwareRule
      responses:
        '200':
          description: Successful operation
        '400':
          description: Instance with the provided Name does already exist
        '422':
          description: Invalid data content provided
      requestBody:
        $ref: '#/components/requestBodies/ContextAwareRule'
  '/context-aware-rules/{context_aware_rule_name}/':
    get:
      tags:
        - context-aware-rule
      summary: Get an instance
      description: ''
      operationId: getContextAwareRule
      parameters:
        - in: path
          name: context_aware_rule_name
          description: Name of the instance queried
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Succesful operation - Returning instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContextAwareRule'
        '404':
          description: Instance with the provided Name does not exist
    put:
      tags:
        - context-aware-rule
      summary: Update an instance
      description: ''
      operationId: putContextAwareRule
      parameters:
        - in: path
          name: context_aware_rule_name
          description: Name of the instance to be modified
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '404':
          description: Instance with the provided Name does not exist
        '422':
          description: Invalid data content provided
      requestBody:
        $ref: '#/components/requestBodies/ContextAwareRule'
    delete:
      tags:
        - context-aware-rule
      summary: Delete an instance
      description: ''
      operationId: deleteContextAwareRule
      parameters:
        - in: path
          name: context_aware_rule_name
          description: Name of the instance to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '404':
          description: Instance with the provided Name does not exist
  '/features-of-interest':
    get:
      tags:
        - feature-of-interest
      summary: Get all the instances
      description: ''
      operationId: getFeaturesOfInterest
      responses:
        '200':
          description: 'Array containing instances'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FeatureOfInterest'
    post:
      tags:
        - feature-of-interest
      summary: Create a new instance
      description: ''
      operationId: addFeatureOfInterest
      responses:
        '200':
          description: Successful operation
        '400':
          description: Instance with the provided Name does already exist
        '422':
          description: Invalid data content provided
      requestBody:
        $ref: '#/components/requestBodies/FeatureOfInterest'
  '/features-of-interest/{feature_of_interest_name}/':
    get:
      tags:
        - feature-of-interest
      summary: Get an instance
      description: ''
      operationId: getFeatureOfInterest
      parameters:
        - in: path
          name: feature_of_interest_name
          description: Name of the instance queried
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Succesful operation - Returning instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureOfInterest'
        '404':
          description: Instance with the provided Name does not exist
    put:
      tags:
        - feature-of-interest
      summary: Update an instance
      description: ''
      operationId: putFeatureOfInterest
      parameters:
        - in: path
          name: feature_of_interest_name
          description: Name of the instance to be modified
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '404':
          description: Instance with the provided Name does already exist
        '422':
          description: Invalid data content provided
      requestBody:
        $ref: '#/components/requestBodies/FeatureOfInterest'
    delete:
      tags:
        - feature-of-interest
      summary: Delete an instance
      description: ''
      operationId: deleteFeatureOfInterest
      parameters:
        - in: path
          name: feature_of_interest_name
          description: Name of the instance to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '404':
          description: Instance with the provided Name does not exist
  '/locations':
    get:
      tags:
        - location
      summary: Get all the instances
      description: ''
      operationId: getLocations
      responses:
        '200':
          description: 'Array containing instances'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
    post:
      tags:
        - location
      summary: Create a new instance
      description: ''
      operationId: addLocation
      responses:
        '200':
          description: Successful operation
        '400':
          description: Instance with the provided Name does already exist
        '422':
          description: Invalid data content provided
      requestBody:
        $ref: '#/components/requestBodies/Location'
  '/locations/{location_name}/':
    get:
      tags:
        - location
      summary: Get an instance
      description: ''
      operationId: getLocation
      parameters:
        - in: path
          name: location_name
          description: Name of the instance queried
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Succesful operation - Returning instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
        '404':
          description: Instance with the provided Name does not exist
    put:
      tags:
        - location
      summary: Update an instance
      description: ''
      operationId: putLocation
      parameters:
        - in: path
          name: location_name
          description: Name of the instance to be modified
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '404':
          description: Instance with the provided Name does already exist
        '422':
          description: Invalid data content provided
      requestBody:
        $ref: '#/components/requestBodies/Location'
    delete:
      tags:
        - location
      summary: Delete an instance
      description: ''
      operationId: deleteLocation
      parameters:
        - in: path
          name: location_name
          description: Name of the instance to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '404':
          description: Instance with the provided Name does not exist
  '/observable-properties':
    get:
      tags:
        - observable-property
      summary: Get all the instances
      description: ''
      operationId: getObservableProperties
      responses:
        '200':
          description: 'Array containing instances'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObservableProperty'
    post:
      tags:
        - observable-property
      summary: Create a new instance
      description: ''
      operationId: addObservableProperty
      responses:
        '200':
          description: Successful operation
        '400':
          description: Instance with the provided Name does already exist
        '422':
          description: Invalid data content provided
      requestBody:
        $ref: '#/components/requestBodies/ObservableProperty'
  '/observable-properties/{observable_property_name}/':
    get:
      tags:
        - observable-property
      summary: Get an instance
      description: ''
      operationId: getObservableProperty
      parameters:
        - in: path
          name: observable_property_name
          description: Name of the instance queried
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Succesful operation - Returning instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservableProperty'
        '404':
          description: Instance with the provided Name does not exist
    put:
      tags:
        - observable-property
      summary: Update an instance
      description: ''
      operationId: putObservableProperty
      parameters:
        - in: path
          name: observable_property_name
          description: Name of the instance to be modified
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '404':
          description: Instance with the provided Name does already exist
        '422':
          description: Invalid data content provided
      requestBody:
        $ref: '#/components/requestBodies/ObservableProperty'
    delete:
      tags:
        - observable-property
      summary: Delete an instance
      description: ''
      operationId: deleteObservableProperty
      parameters:
        - in: path
          name: observable_property_name
          description: Name of the instance to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '404':
          description: Instance with the provided Name does not exist
  '/observations':
    get:
      tags:
        - observation
      summary: Get all the instances
      description: ''
      operationId: getObservations
      responses:
        '200':
          description: 'Array containing instances'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Observation'
    post:
      tags:
        - observation
      summary: Create a new instance
      description: ''
      operationId: addObservation
      responses:
        '200':
          description: Successful operation
        '400':
          description: Instance with the provided information does already exist
        '404':
          description: Instance does not have an existing Sensor
        '422':
          description: Invalid data content provided
      requestBody:
        $ref: '#/components/requestBodies/Observation'
  '/observations/{observation_id}/':
    get:
      tags:
        - observation
      summary: Get an instance
      description: ''
      operationId: getObservation
      parameters:
        - in: path
          name: observation_id
          description: ID of the instance queried
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Succesful operation - Returning instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Observation'
        '404':
          description: Instance with the provided ID does not exist
    delete:
      tags:
        - observation
      summary: Delete an instance
      description: ''
      operationId: deleteObservation
      parameters:
        - in: path
          name: observation_id
          description: ID of the instance to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '404':
          description: Instance with the provided ID does not exist
  '/platforms':
    get:
      tags:
        - platform
      summary: Get all the instances
      description: ''
      operationId: getPlatforms
      responses:
        '200':
          description: 'Array containing instances'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Platform'
    post:
      tags:
        - platform
      summary: Create a new instance
      description: ''
      operationId: addPlatform
      responses:
        '200':
          description: Successful operation
        '400':
          description: Instance with the provided Name does already exist
        '422':
          description: Invalid data content provided
      requestBody:
        $ref: '#/components/requestBodies/Platform'
  '/platforms/{platform_name}/':
    get:
      tags:
        - platform
      summary: Get an instance
      description: ''
      operationId: getPlatform
      parameters:
        - in: path
          name: platform_name
          description: Name of the instance queried
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Succesful operation - Returning instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Platform'
        '404':
          description: Instance with the provided Name does not exist
    put:
      tags:
        - platform
      summary: Update an instance
      description: ''
      operationId: putPlatform
      parameters:
        - in: path
          name: platform_name
          description: Name of the instance to be modified
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '404':
          description: Instance with the provided Name does already exist
        '422':
          description: Invalid data content provided
      requestBody:
        $ref: '#/components/requestBodies/Platform'
    delete:
      tags:
        - platform
      summary: Delete an instance
      description: ''
      operationId: deletePlatform
      parameters:
        - in: path
          name: platform_name
          description: Name of the instance to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '404':
          description: Instance with the provided Name does not exist
  '/sensors':
    get:
      tags:
        - sensor
      summary: Get all the instances
      description: ''
      operationId: getSensors
      responses:
        '200':
          description: 'Array containing instances'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sensor'
    post:
      tags:
        - sensor
      summary: Create a new instance
      description: ''
      operationId: addSensor
      responses:
        '200':
          description: Successful operation
        '400':
          description: Instance with the provided Name does already exist
        '422':
          description: Invalid data content provided
      requestBody:
        $ref: '#/components/requestBodies/Sensor'
  '/sensors/{sensor_name}/':
    get:
      tags:
        - sensor
      summary: Get an instance
      description: ''
      operationId: getSensor
      parameters:
        - in: path
          name: sensor_name
          description: Name of the instance queried
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Succesful operation - Returning instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sensor'
        '404':
          description: Instance with the provided Name does not exist
    put:
      tags:
        - sensor
      summary: Update an instance
      description: ''
      operationId: putSensor
      parameters:
        - in: path
          name: sensor_name
          description: Name of the instance to be modified
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '404':
          description: Instance with the provided Name does already exist
        '422':
          description: Invalid data content provided
      requestBody:
        $ref: '#/components/requestBodies/Sensor'
    delete:
      tags:
        - sensor
      summary: Delete an instance
      description: ''
      operationId: deleteSensor
      parameters:
        - in: path
          name: sensor_name
          description: Name of the instance to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '404':
          description: Instance with the provided Name does not exist
  '/sensors/{sensor_name}/observations/':
    get:
      tags:
        - sensor
      summary: Get all the Observations of a Sensor
      description: ''
      operationId: getSensorObservations
      parameters:
        - in: path
          name: sensor_name
          description: Name of the instance queried
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Array containing instances'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Observation'
        '404':
          description: Instance with the provided Name does not exist
  '/things':
    get:
      tags:
        - thing
      summary: Get all the instances
      description: ''
      operationId: getThings
      responses:
        '200':
          description: 'Array containing instances'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Thing'
    post:
      tags:
        - thing
      summary: Create a new instance
      description: ''
      operationId: addThing
      responses:
        '200':
          description: Successful operation
        '400':
          description: Instance with the provided Name does already exist
        '422':
          description: Invalid data content provided
      requestBody:
        $ref: '#/components/requestBodies/Thing'
  '/things/{thing_name}/':
    get:
      tags:
        - thing
      summary: Get an instance
      description: ''
      operationId: getThing
      parameters:
        - in: path
          name: thing_name
          description: Name of the instance queried
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Succesful operation - Returning instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thing'
        '404':
          description: Instance with the provided Name does not exist
    put:
      tags:
        - thing
      summary: Update an instance
      description: ''
      operationId: putThing
      parameters:
        - in: path
          name: thing_name
          description: Name of the instance to be modified
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '404':
          description: Instance with the provided Name does not exist
        '422':
          description: Invalid data content provided
      requestBody:
        $ref: '#/components/requestBodies/Thing'
    delete:
      tags:
        - thing
      summary: Delete an instance
      description: ''
      operationId: deleteThing
      parameters:
        - in: path
          name: thing_name
          description: Name of the instance to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '404':
          description: Instance with the provided Name does not exist
  '/thing-types':
    get:
      tags:
        - thing-type
      summary: Get all the instances
      description: ''
      operationId: getThingTypes
      responses:
        '200':
          description: 'Array containing instances'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ThingType'
    post:
      tags:
        - thing-type
      summary: Create a new instance
      description: ''
      operationId: addThingType
      responses:
        '200':
          description: Successful operation
        '400':
          description: Instance with the provided Name does already exist
        '422':
          description: Invalid data content provided
      requestBody:
        $ref: '#/components/requestBodies/ThingType'
  '/thing-types/{thing_type_name}/':
    get:
      tags:
        - thing-type
      summary: Get an instance
      description: ''
      operationId: getThingType
      parameters:
        - in: path
          name: thing_type_name
          description: Name of the instance queried
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Succesful operation - Returning instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingType'
        '404':
          description: Instance with the provided Name does not exist
    put:
      tags:
        - thing-type
      summary: Update an instance
      description: ''
      operationId: putThingType
      parameters:
        - in: path
          name: thing_type_name
          description: Name of the instance queried
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '404':
          description: Instance with the provided Name does not exist
        '422':
          description: Invalid data content provided
      requestBody:
        $ref: '#/components/requestBodies/ThingType'
    delete:
      tags:
        - thing-type
      summary: Delete an instance
      description: 'Only if no Thing is of this Type'
      operationId: deleteThingType
      parameters:
        - in: path
          name: thing_type_name
          description: Name of the instance queried
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: Instance cannot be deleted, a Thing is using it
        '404':
          description: Instance with the provided Name does not exist
servers:
  - url: http://localhost:5001/
    description: Standalone server
  - url: http://localhost:8000/api/
    description: Production server
components:
  requestBodies:
    ActuatableProperty:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ActuatableProperty'
      description: ''
      required: true
    Actuation:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Actuation'
      description: ''
      required: true
    Actuator:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Actuator'
      description: ''
      required: true
    ContextAwareRule:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContextAwareRule'
      description: ''
      required: true
    FeatureOfInterest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FeatureOfInterest'
      description: ''
      required: true
    Location:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Location'
      description: ''
      required: true
    ObservableProperty:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ObservableProperty'
      description: ''
      required: true
    Observation:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Observation'
      description: ''
      required: true
    Sensor:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Sensor'
      description: ''
      required: true
    Platform:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Platform'
      description: ''
      required: true
    ThingType:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ThingType'
      description: ''
      required: true
    Thing:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Thing'
      description: ''
      required: true
  schemas:
    ActuatableProperty:
      type: object
      required:
        - name
        - feature_of_interest_name
      properties:
        name:
          type: string
          example: "ActuatablePropertyA"
        feature_of_interest_name:
          $ref: '#/components/schemas/FeatureOfInterest/properties/name'
    Actuation:
      type: object
      required:
        - observation_id
        - context_aware_rule_name
      properties:
        observation_id:
          type: string
          example: "ID1"
        context_aware_rule_name:
          $ref: '#/components/schemas/ContextAwareRule/properties/name'
        time_start:
          type: string
          format: date-time
          example: "2021-12-13T19:17:12+00:00"
        time_end:
          type: string
          format: date-time
          example: "2021-12-13T19:17:13+00:00"
    Actuator:
      type: object
      required:
        - name
        - thing_name
        - actuatable_property_name
      properties:
        name:
          type: string
          example: "Actuator1"
        thing_name:
          $ref: '#/components/schemas/Thing/properties/name'
        actuatable_property_name:
          $ref: '#/components/schemas/ActuatableProperty/properties/name'
        location_name:
          $ref: '#/components/schemas/Location/properties/name'
    ContextAwareRule:
      type: object
      required:
        - name
        - sensor_observed_name
        - operation_type
      properties:
        name:
          type: string
          example: "Rule1"
        sensor_observed_name:
          type: string
          example: "SensorA"
        operation_type:
          type: string
          enum:
            - NOT_EQUAL
            - EQUAL
            - LESS_THAN
            - MORE_THAN
        executing:
          type: boolean
          example: true
        priority:
          type: boolean
          example: false
        value_to_compare_boolean:
          type: boolean
          example: false
          description: Only taken into account if the Sensor is reading a BOOLEAN.
        value_to_compare_string:
          type: string
          example: "OK"
          description: Only taken into account if the Sensor is reading a STRING.
        value_to_compare_integer:
          type: integer
          example: 288
          description: Only taken into account if the Sensor is reading a INTEGER.
        value_to_compare_float:
          type: number
          example: 2.88
          description: Only taken into account if the Sensor is reading a FLOAT.
    FeatureOfInterest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: "FeatureOfInterestA"
        location_name:
          $ref: '#/components/schemas/Location/properties/name'
    Location:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: "MyLocation1"
        latlng:
          type: string
          example: "41.2, 2.1"
    ObservableProperty:
      type: object
      required:
        - name
        - value_type_to_measure
        - feature_of_interest_name
      properties:
        name:
          type: string
          example: "ObservablePropertyA"
        value_type_to_measure:
          type: string
          enum:
            - BOOLEAN
            - STRING
            - INTEGER
            - FLOAT
        feature_of_interest_name:
          $ref: '#/components/schemas/FeatureOfInterest/properties/name'
    Observation:
      type: object
      required:
        - sensor_name
        - time_start
        - value
      properties:
        sensor_name:
          $ref: '#/components/schemas/Sensor/properties/name'
        time_start:
          type: string
          format: date-time
          example: "2021-12-13T19:17:12+00:00"
        time_end:
          type: string
          format: date-time
          example: "2021-12-13T19:17:13+00:00"
        value:
          type: string
          description: This will be either a BOOLEAN, STRING, INTEGER, or FLOAT. Depending on the Sensor type.
    Platform:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: "Platform_9_3/4"
        location_name:
          $ref: '#/components/schemas/Location/properties/name'
    Sensor:
      type: object
      required:
        - name
        - thing_name
      properties:
        name:
          type: string
          example: "Platform_9_3/4"
        thing_name:
          $ref: '#/components/schemas/Thing/properties/name'
        observable_property_name:
          $ref: '#/components/schemas/ObservableProperty/properties/name'
        location_name:
          $ref: '#/components/schemas/Location/properties/name'
    Thing:
      type: object
      required:
        - name
        - type_name
      properties:
        name:
          type: string
          example: "ThingA"
        type_name:
          $ref: '#/components/schemas/ThingType/properties/name'
        location_name:
          $ref: '#/components/schemas/Location/properties/name'
    ThingType:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: "ThingTypeA"